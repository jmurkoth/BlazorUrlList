<li draggable="true" @key="DisplayItem.Url" style="list-style-type:none; padding:10px" 
    @ondragstart="@(() => HandleDragStart(DisplayItem))"  @ondrop="@(() => HandleDrop(DisplayItem))">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-1"><span class="oi oi-grid-four-up align-middle"></span></div>
            <div class="col-10">
                <div class="row align-items-center">
                    <div class="col-1"><img src="/images/no-image.png" width="64" height="64" /></div>
                    <div class="col-11">
                        <div class="row">
                            <input type="text" placeholder="Enter a title" class="form-control-sm" />
                        </div>
                        <div class="row">
                            <textarea placeholder="Enter a description" class=""></textarea>
                        </div>
                        <div class="row">
                            @DisplayItem.Url
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-1 align-middle"><span class="oi oi-delete" @onclick="@(()=>HandleDelete(DisplayItem))"></span></div>
        </div>
    </div>
</li>
@code {

    [Parameter]
    public CustomUrl DisplayItem { get; set; }
    [Parameter]
    public EventCallback<CustomUrl> OnUrlDragStart { get; set; }
    [Parameter]
    public EventCallback<CustomUrl> OnUrlDrop { get; set; }
    [Parameter]
    public EventCallback<CustomUrl> OnUrlDelete { get; set; }

    public async Task HandleDragStart(CustomUrl customUrl)
    {
        await OnUrlDragStart.InvokeAsync(customUrl);
    }
    public async Task HandleDrop(CustomUrl customUrl)
    {
        await OnUrlDrop.InvokeAsync(customUrl);
    }
    public async Task HandleDelete(CustomUrl customUrl)
    {
        await OnUrlDelete.InvokeAsync(customUrl);
    }
}
