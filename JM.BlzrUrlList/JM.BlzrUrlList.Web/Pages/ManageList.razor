@page  "/edit"
@inject AppState appState
@inject UrlService urlService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container" style="padding-top:100px">
    <div class="row">
        <div class="col-sm">
            
           
            <div class="form-floating mb-3">
                <input type="text" class="form-control  @(isValid ? "" : "is-invalid")" id="lnkTitle" placeholder=""  @bind="listTitle" @onblur="CheckIfExists">
                <label for="lnkTitle">Link Title</label>
            </div>
             <div class="alert alert-danger" role="alert" hidden="@isValid">
               This Link exists . Please choose another one !
            </div>
        </div>
        <div class="col-sm">
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="lnkDescription" placeholder="" @bind="listDescription">
                <label for="lnkDescription">Description</label>
            </div>
        </div>
        <div class="col-sm">
            <div class="d-grid gap-2 mx-auto">
                <button class="btn btn-lg btn-primary"  disabled="@(!appState.Validate() || !isValid)" @onclick="Save">Publish</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <UrlLink OnValidLink="Linkadded"></UrlLink>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <UrlEditor Urls="appState.CurrentList.Urls" OnUrlDelete="UrlDeleted" />
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    private string listTitle;
    private string listDescription;
    private bool isValid= true;

    public async Task Linkadded(string newLink)
    {
        // Add a state service
        var metaData = await urlService.GetUrlMetaData(newLink);
        appState.AddUrl(new Models.CustomUrl
        {
            Url = newLink,
            Description = metaData?.Description,
            Title = metaData?.Title,
            Image = metaData?.Image
        });
         Console.WriteLine($"Link added-{newLink}");
        StateHasChanged();
    }
    public void UrlDeleted()
    {
        StateHasChanged();
    }
    public async Task CheckIfExists()
    {

        isValid=true;
        if (string.IsNullOrEmpty(listTitle)) return;
        Console.WriteLine($"Checking if listtitle entered exists- {listTitle}");
        var match = await urlService.GetUrlList(listTitle);
        if (match != null)
        {
            Console.WriteLine($"URL match exists");
            isValid=false;
        }
    }

    public async Task Save()
    {
       
        var authState = await authenticationStateTask;
        var user = authState.User;
        var userId=string.Empty;
        if (user.Identity.IsAuthenticated)
        {
           userId=user.GetUserNameClaim();
           Console.WriteLine(userId);
           
        }
         appState.SetMiscInfo(userId,listTitle, listDescription);
        var match = await urlService.SaveUrlList(appState.CurrentList);
        if (match != null)
        {
            appState.Reset();
            Console.WriteLine($"Url List saved");
            NavManager.NavigateTo($"/{match.UrlId}");
        }


    }

}